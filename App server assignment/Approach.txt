Assignment Solutions:

1. The backend datastore shall be a SQL Server database. Have a table that stores a map of keys to values.

		SQL Server database with a table to store keys to values is created. Can be verified by checking the DDL file checked in.

2. The Application shall be hosted on three tomcat instances running on different ports in the same machine.

		Three tomcat instances are created on ports 8081, 8082 and 8083. Can be verified by looking at the server.xml files checked in.

3. The application should have the following operations
		a) Add a key,value. If the key exists, overwrite.
				Added null check also. Cannot add a row with a null key or exception.

		b) Display the list of all Keys
				Displays list of all keys. Caching implemented.

		c) Display the list of all Keys and Values (sorted by either key or value as specified)
		d) Delete a value by specifying the key
		e) Get the number of Key-value entries.

		All the above operations have been performed using a servlet and frontend html file as a Dynamic web project in eclipse and deployed as war file to the tomcat instances running on different ports. Have checked in the servlet file and html files.

	Connectivity to Database shall be through a JDBC DataSource configured in the global tomcat datasources configuration to allow a maximum of 30 connections to the database.

		The global Tomcat datasource has been configured to accept a maximum of 30 connections by setting "maxActive= 30" for the SQLServerDriver resource.

4. There shall be an Apache WebServer balancing load to these applications with session affinity. 

		Load balancing is acheived through mod_proxy. The httpd.conf is edited to load the mod_proxy module and Balancer module was added to balance the load across the three instances of Tomcat created already. Can be verified by checking the httpd.conf file.

5. The webserver shall also ensure that the data returned is compressed through GZ if the browser supports the same.

		In the httpd.conf file, the deflate module is enabled and OutputFilter is set to DEFLATE. This enables the gzip compression. This can be verified by looking at the response headers in the browser tools. The Content-Encoding type of the response header will be gzip. 

		The response header for my request is as follows:

				HTTP/1.1 200 OK
				Date: Thu, 24 Jul 2014 07:16:21 GMT
				Server: Apache-Coyote/1.1
				Content-Type: text/HTML;charset=ISO-8859-1
				Vary: Accept-Encoding
				Content-Encoding: gzip
				Content-Length: 174
				Keep-Alive: timeout=5, max=100
				Connection: Keep-Alive

6. The webserver shall direct the browsers to cache the getValueForKey results for a maximum of 1-hour and the results of getListofKeys and getListOfKeyValueEntries (i.e. b and c above) for a maximum of 2-hours.

		There is no getValueForKey method as per the question. Added that method as 6th query and set cache-control to 3600 seconds(1 hour). Hence, I have cached getListofKeys and getListOfKeyValueEntries methods for two hours by setting the response header as follows:  "response.setHeader("Cache-Control", "max-age = 7200");"

7. All requests should be logged in the format of KV_DataStore_Access.log along with sessionid. The log should be such that it rotates every 2 hours and creates a new logfile with the old one archives in the form of KV_DataStore_Access.log.<<timestamp>>
The log shall also contain the IP/Port of the application instance to which the request actually hit i.e. after the load distribution. 

		The LogFormat in the httpd.conf is changed to add session id in the log file and the log file name is changed as directed using the CustomLog function and the log is rotated every 2 hours.

8. Please checkin the httpd.conf, the tomcat configuration files including web.xml, Java code that uses CXF, And Database DDLs.

		The above files have been checked in. The web.xml is not created in my code because I have used Servlet 3.0. There is no need for Servlet mapping in Servlet 3.0. Instead, I have used the annotation @WebServlet. 

9. Also, please use Wink (a software) to create an SWF demonstrating the fact that you've accomplished load balancing. 

		The swf file generated is in the 'wink file' folder and is also checked in. For clarity of screen, view the wink.html. It clearly shows every request being processed by a different server. The "Running on tomcat instance<number>" message differs across every instance. It is added to show that three instances of the server are running.

10. Deployment Instructions:

		Create a Dynamic Web Project in Eclipse and add the servlets and HTML files in their respective directories. And export the project as a WAR file into the webapps folder of the tomcat instances. Use the server.xml that I have checked in and the httpd.conf from the git. Then access "http:localhost/KeyValueServlet". You should be able to view the application.

